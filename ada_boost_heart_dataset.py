# -*- coding: utf-8 -*-
"""Ada Boost - Heart Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pK02MyPcZCQv7ETPe603a0LTkMqNxCc6
"""

import pandas as pd

import numpy as np

dfheart = pd.read_csv("C:\\Users\\hp\\Desktop\\heart.csv")

dfheart

dfheart.isna().sum()

dfheart.describe()

import matplotlib.pyplot as plt

plt.boxplot(dfheart)
plt.show()

"""### imbalance"""

dfheart

dfheart["target"]

dfheart["target"].unique()

dfheart["target"].value_counts()

dfheart["target"].value_counts().plot(kind = "bar")

"""### Separate Data"""

# Independent Data  -- X
# Dependent Data  --- y

dfheart

dfheart.drop("target", axis = 1)

X = dfheart.drop("target", axis = 1)

X

y = dfheart["target"]

y

"""### Splitting of Data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20, random_state = 2)

X_train.shape, X_test.shape, X.shape

y_train.shape, y_test.shape, y.shape

"""### Building Model - AdaBoost"""

from sklearn.ensemble import AdaBoostClassifier

ada_model = AdaBoostClassifier()  # Decision Stump

ada_model

ada_model.fit(X_train, y_train)

ada_model.score(X_test, y_test)

"""### Ada Boost - SVM as Base Model"""

from sklearn.ensemble import AdaBoostClassifier

from sklearn.svm import SVC

svm_model = SVC()

svm_model

ada_svm = AdaBoostClassifier( base_estimator= svm_model, n_estimators=50,
                             learning_rate=1.0,algorithm='SAMME')

ada_svm

ada_svm.fit(X_train, y_train)

ada_svm.score(X_test, y_test)

"""###  AdaBoost - Logistic Regression"""

import warnings

warnings.filterwarnings("ignore")

from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()

logreg

ada_lreg = AdaBoostClassifier(base_estimator=logreg, algorithm="SAMME", n_estimators=50)

ada_lreg

ada_lreg.fit(X_train, y_train)

ada_lreg.score(X_test, y_test)

"""### Cross Validation"""

from sklearn.model_selection import cross_val_score, KFold

from sklearn.ensemble import AdaBoostClassifier

ada_cv = AdaBoostClassifier()

kf = KFold(n_splits=5)

kf

ada_score = cross_val_score(ada_cv, X, y, cv=kf )

ada_score

ada_score.mean()

"""###  Hyperparameter Tuning"""

from sklearn.model_selection import GridSearchCV

ada_gscv = AdaBoostClassifier() #n_estimators , learning_rate, algorithm

ada_gscv

param = {

    "n_estimators" : [25, 50, 75, 100],
    "learning_rate" : [1.0, 0.1, 0.01, 0.001],
    "algorithm" : ['SAMME', 'SAMME.R']
            }

gscv = GridSearchCV(ada_gscv,param_grid=param, cv= 5, n_jobs= -1)

gscv

gscv.fit(X,y)

gscv.best_params_

gscv.best_score_

gscv.cv_results_

pd.DataFrame(gscv.cv_results_)

